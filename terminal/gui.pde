/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void lThrottleChange(GSlider source, GEvent event) { //_CODE_:lThrottleSlider:415290:
 
} //_CODE_:lThrottleSlider:415290:

public void rThrottleChange(GSlider source, GEvent event) { //_CODE_:rThrottleSlider:813328:
 
} //_CODE_:rThrottleSlider:813328:

public void pathKnobTurn(GKnob source, GEvent event) { //_CODE_:pathKnob:443500:
  pathLabel.setText(str(pathKnob.getValueI()));
} //_CODE_:pathKnob:443500:

public void turnLeftButtonClick(GButton source, GEvent event) { //_CODE_:button1:273411:
  sendTurnLeftByMessage(pathKnob.getValueI());
} //_CODE_:button1:273411:

public void moveForwardButtonClick(GButton source, GEvent event) { //_CODE_:button2:222039:
  sendMoveForwardByMessage(pathKnob.getValueI());
} //_CODE_:button2:222039:

public void turnRightButtonClick(GButton source, GEvent event) { //_CODE_:button3:774027:
  sendTurnRightByMessage(pathKnob.getValueI());
} //_CODE_:button3:774027:

public void moveBackwardButtonClick(GButton source, GEvent event) { //_CODE_:button4:844172:
  sendMoveBakwardByMessage(pathKnob.getValueI());
} //_CODE_:button4:844172:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  lThrottleSlider = new GSlider(this, 45, 5, 354, 41, 10.0);
  lThrottleSlider.setShowValue(true);
  lThrottleSlider.setShowLimits(true);
  lThrottleSlider.setLimits(130, 0, 255);
  lThrottleSlider.setNumberFormat(G4P.INTEGER, 0);
  lThrottleSlider.setOpaque(false);
  lThrottleSlider.addEventHandler(this, "lThrottleChange");
  label1 = new GLabel(this, 4, 11, 37, 29);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("L");
  label1.setOpaque(false);
  rThrottleSlider = new GSlider(this, 44, 48, 355, 44, 10.0);
  rThrottleSlider.setShowValue(true);
  rThrottleSlider.setShowLimits(true);
  rThrottleSlider.setLimits(120, 0, 255);
  rThrottleSlider.setNumberFormat(G4P.INTEGER, 0);
  rThrottleSlider.setOpaque(false);
  rThrottleSlider.addEventHandler(this, "rThrottleChange");
  label2 = new GLabel(this, 1, 58, 39, 29);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("R");
  label2.setOpaque(false);
  pathKnob = new GKnob(this, 187, 160, 60, 60, 0.8);
  pathKnob.setTurnRange(110, 70);
  pathKnob.setTurnMode(GKnob.CTRL_HORIZONTAL);
  pathKnob.setSensitivity(1);
  pathKnob.setShowArcOnly(false);
  pathKnob.setOverArcOnly(false);
  pathKnob.setIncludeOverBezel(false);
  pathKnob.setShowTrack(true);
  pathKnob.setLimits(0.5, 0.0, 200.0);
  pathKnob.setShowTicks(true);
  pathKnob.setOpaque(false);
  pathKnob.addEventHandler(this, "pathKnobTurn");
  button1 = new GButton(this, 76, 183, 80, 30);
  button1.setText("Turn left");
  button1.addEventHandler(this, "turnLeftButtonClick");
  button2 = new GButton(this, 176, 114, 80, 30);
  button2.setText("Move forward");
  button2.addEventHandler(this, "moveForwardButtonClick");
  button3 = new GButton(this, 280, 181, 80, 30);
  button3.setText("Turn right");
  button3.addEventHandler(this, "turnRightButtonClick");
  button4 = new GButton(this, 175, 263, 80, 30);
  button4.setText("Move backward");
  button4.addEventHandler(this, "moveBackwardButtonClick");
  pathLabel = new GLabel(this, 176, 224, 80, 20);
  pathLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  pathLabel.setText("0");
  pathLabel.setOpaque(false);
  locatorSketchPad = new GSketchPad(this, 450, 20, 450, 400);
}

// Variable declarations 
// autogenerated do not edit
GSlider lThrottleSlider; 
GLabel label1; 
GSlider rThrottleSlider; 
GLabel label2; 
GKnob pathKnob; 
GButton button1; 
GButton button2; 
GButton button3; 
GButton button4; 
GLabel pathLabel; 
GSketchPad locatorSketchPad; 